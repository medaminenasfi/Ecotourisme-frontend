import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Button, Table, Modal, Form, Alert, Spinner, Badge } from 'react-bootstrap';
import { FaEdit, FaTrashAlt } from 'react-icons/fa';
import Navbar from '../Components/navbar';
import jwtDecode from 'jwt-decode';

const GestionReservations = () => {
  const [reservations, setReservations] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [isAdmin, setIsAdmin] = useState(false);

  // Form state
  const [formData, setFormData] = useState({
    user: '',
    circuit: '',
    date: '',
    numberOfPeople: '',
    totalPrice: '',
    status: 'pending'
  });

  // Configure axios instance
  const api = axios.create({
    baseURL: 'hhttp://localhost:5000/api/reservations',
    headers: {
      'Content-Type': 'application/json'
    }
  });

  // Add JWT interceptor
  api.interceptors.request.use(config => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  });

  useEffect(() => {
    const checkAuth = () => {
      const token = localStorage.getItem('accessToken');
      if (!token) {
        window.location.href = '/login';
        return;
      }
      
      try {
        const decoded = jwtDecode(token);
        setIsAdmin(decoded.roles.includes('admin'));
        if (decoded.exp * 1000 < Date.now()) {
          localStorage.removeItem('accessToken');
          window.location.href = '/login';
        }
      } catch (error) {
        localStorage.removeItem('accessToken');
        window.location.href = '/login';
      }
    };

    const fetchReservations = async () => {
      try {
        checkAuth();
        const response = await api.get('http://localhost:5000/api/reservations');
        setReservations(response.data);
      } catch (err) {
        handleError(err);
      } finally {
        setLoading(false);
      }
    };

    fetchReservations();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      if (selectedReservation) {
        const response = await api.put(`http://localhost:5000/api/reservations/${id}${selectedReservation._id}`, formData);
        setReservations(reservations.map(r => r._id === response.data._id ? response.data : r));
        setSuccess('Reservation updated successfully!');
      } else {
        const response = await api.post('http://localhost:5000/api/reservations', formData);
        setReservations([...reservations, response.data]);
        setSuccess('Reservation created successfully!');
      }
      setShowModal(false);
    } catch (err) {
      handleError(err);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this reservation?')) {
      try {
        await api.delete(`http://localhost:5000/api/reservations/${id}`);
        setReservations(reservations.filter(r => r._id !== id));
        setSuccess('Reservation deleted successfully!');
      } catch (err) {
        handleError(err);
      }
    }
  };

  const handleError = (err) => {
    if (err.response) {
      if (err.response.status === 401) {
        localStorage.removeItem('accessToken');
        window.location.href = '/login';
      }
      setError(err.response.data.message || 'An error occurred');
    } else {
      setError(err.message);
    }
  };

  const openModal = (reservation = null) => {
    setSelectedReservation(reservation);
    setFormData(reservation ? {
      user: reservation.user?._id || '',
      circuit: reservation.circuit?._id || '',
      date: reservation.date?.split('T')[0] || '',
      numberOfPeople: reservation.numberOfPeople.toString(),
      totalPrice: reservation.totalPrice.toString(),
      status: reservation.status
    } : {
      user: '',
      circuit: '',
      date: '',
      numberOfPeople: '',
      totalPrice: '',
      status: 'pending'
    });
    setShowModal(true);
  };

  return (
    <>
      <Navbar />
      <div className="container mt-5">
        <div className="card shadow-sm">
          <div className="card-header bg-white d-flex justify-content-between align-items-center">
            <div>
              <h2 className="mb-0">Reservation Management</h2>
              <p className="text-muted mb-0">Manage all hiking reservations</p>
            </div>
            {isAdmin && (
              <Button variant="primary" onClick={() => openModal()}>
                New Reservation
              </Button>
            )}
          </div>

          <div className="card-body">
            {error && <Alert variant="danger">{error}</Alert>}
            {success && <Alert variant="success">{success}</Alert>}

            {loading ? (
              <div className="text-center py-5">
                <Spinner animation="border" role="status">
                  <span className="visually-hidden">Loading...</span>
                </Spinner>
              </div>
            ) : reservations.length === 0 ? (
              <div className="text-center py-4 text-muted">No reservations found</div>
            ) : (
              <Table hover responsive className="mb-0">
                <thead>
                  <tr>
                    <th>User</th>
                    <th>Circuit</th>
                    <th>Date</th>
                    <th>People</th>
                    <th>Price</th>
                    <th>Status</th>
                    {isAdmin && <th className="text-center">Actions</th>}
                  </tr>
                </thead>
                <tbody>
                  {reservations.map(reservation => (
                    <tr key={reservation._id}>
                      <td>{reservation.user?.name || 'Deleted User'}</td>
                      <td>{reservation.circuit?.name || 'Deleted Circuit'}</td>
                      <td>{new Date(reservation.date).toLocaleDateString()}</td>
                      <td>{reservation.numberOfPeople}</td>
                      <td>â‚¬{reservation.totalPrice}</td>
                      <td>
                        <Badge 
                          bg={
                            reservation.status === 'confirmed' ? 'success' :
                            reservation.status === 'cancelled' ? 'danger' : 'warning'
                          }
                        >
                          {reservation.status}
                        </Badge>
                      </td>
                      {isAdmin && (
                        <td className="text-center">
                          <Button
                            variant="link"
                            className="text-primary me-2"
                            onClick={() => openModal(reservation)}
                          >
                            <FaEdit size={20} />
                          </Button>
                          <Button
                            variant="link"
                            className="text-danger"
                            onClick={() => handleDelete(reservation._id)}
                          >
                            <FaTrashAlt size={20} />
                          </Button>
                        </td>
                      )}
                    </tr>
                  ))}
                </tbody>
              </Table>
            )}
          </div>
        </div>
      </div>

      {/* Add/Edit Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>
            {selectedReservation ? 'Edit Reservation' : 'New Reservation'}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleSubmit}>
            <Form.Group className="mb-3">
              <Form.Label>User ID</Form.Label>
              <Form.Control
                type="text"
                value={formData.user}
                onChange={(e) => setFormData({...formData, user: e.target.value})}
                required
                pattern="^[0-9a-fA-F]{24}$"
              />
              <Form.Text className="text-muted">
                Valid MongoDB ObjectID required
              </Form.Text>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Circuit ID</Form.Label>
              <Form.Control
                type="text"
                value={formData.circuit}
                onChange={(e) => setFormData({...formData, circuit: e.target.value})}
                required
                pattern="^[0-9a-fA-F]{24}$"
              />
              <Form.Text className="text-muted">
                Valid MongoDB ObjectID required
              </Form.Text>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Date</Form.Label>
              <Form.Control
                type="date"
                value={formData.date}
                onChange={(e) => setFormData({...formData, date: e.target.value})}
                required
              />
            </Form.Group>

            <div className="row g-3">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label>Number of People</Form.Label>
                  <Form.Control
                    type="number"
                    min="1"
                    max="20"
                    value={formData.numberOfPeople}
                    onChange={(e) => setFormData({...formData, numberOfPeople: e.target.value})}
                    required
                  />
                </Form.Group>
              </div>
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label>Total Price (â‚¬)</Form.Label>
                  <Form.Control
                    type="number"
                    step="0.01"
                    min="0"
                    value={formData.totalPrice}
                    onChange={(e) => setFormData({...formData, totalPrice: e.target.value})}
                    required
                  />
                </Form.Group>
              </div>
            </div>

            <Form.Group className="mb-4">
              <Form.Label>Status</Form.Label>
              <Form.Select
                value={formData.status}
                onChange={(e) => setFormData({...formData, status: e.target.value})}
                disabled={!isAdmin}
              >
                <option value="pending">Pending</option>
                <option value="confirmed">Confirmed</option>
                <option value="cancelled">Cancelled</option>
              </Form.Select>
            </Form.Group>

            <div className="d-flex justify-content-end gap-2">
              <Button variant="secondary" onClick={() => setShowModal(false)}>
                Cancel
              </Button>
              <Button variant="primary" type="submit">
                {selectedReservation ? 'Save Changes' : 'Create Reservation'}
              </Button>
            </div>
          </Form>
        </Modal.Body>
      </Modal>
    </>
  );
};

export default GestionReservations;